// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Rosetta.Models
{
    /// <summary> SearchTransactionsResponse contains an ordered collection of BlockTransactions that match the query in SearchTransactionsRequest. These BlockTransactions are sorted from most recent block to oldest block. </summary>
    public partial class SearchTransactionsResponse
    {
        /// <summary> Initializes a new instance of SearchTransactionsResponse. </summary>
        /// <param name="transactions"> transactions is an array of BlockTransactions sorted by most recent BlockIdentifier (meaning that transactions in recent blocks appear first). If there are many transactions for a particular search, transactions may not contain all matching transactions. It is up to the caller to paginate these transactions using the max_block field. </param>
        /// <param name="totalCount"> total_count is the number of results for a given search. Callers typically use this value to concurrently fetch results by offset or to display a virtual page number associated with results. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="transactions"/> is null. </exception>
        internal SearchTransactionsResponse(IEnumerable<BlockTransaction> transactions, long totalCount)
        {
            if (transactions == null)
            {
                throw new ArgumentNullException(nameof(transactions));
            }

            Transactions = transactions.ToList();
            TotalCount = totalCount;
        }

        /// <summary> Initializes a new instance of SearchTransactionsResponse. </summary>
        /// <param name="transactions"> transactions is an array of BlockTransactions sorted by most recent BlockIdentifier (meaning that transactions in recent blocks appear first). If there are many transactions for a particular search, transactions may not contain all matching transactions. It is up to the caller to paginate these transactions using the max_block field. </param>
        /// <param name="totalCount"> total_count is the number of results for a given search. Callers typically use this value to concurrently fetch results by offset or to display a virtual page number associated with results. </param>
        /// <param name="nextOffset"> next_offset is the next offset to use when paginating through transaction results. If this field is not populated, there are no more transactions to query. </param>
        internal SearchTransactionsResponse(IReadOnlyList<BlockTransaction> transactions, long totalCount, long? nextOffset)
        {
            Transactions = transactions;
            TotalCount = totalCount;
            NextOffset = nextOffset;
        }

        /// <summary> transactions is an array of BlockTransactions sorted by most recent BlockIdentifier (meaning that transactions in recent blocks appear first). If there are many transactions for a particular search, transactions may not contain all matching transactions. It is up to the caller to paginate these transactions using the max_block field. </summary>
        public IReadOnlyList<BlockTransaction> Transactions { get; }
        /// <summary> total_count is the number of results for a given search. Callers typically use this value to concurrently fetch results by offset or to display a virtual page number associated with results. </summary>
        public long TotalCount { get; }
        /// <summary> next_offset is the next offset to use when paginating through transaction results. If this field is not populated, there are no more transactions to query. </summary>
        public long? NextOffset { get; }
    }
}
