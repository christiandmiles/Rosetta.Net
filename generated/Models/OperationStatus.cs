// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Rosetta.Models
{
    /// <summary> OperationStatus is utilized to indicate which Operation status are considered successful. </summary>
    public partial class OperationStatus
    {
        /// <summary> Initializes a new instance of OperationStatus. </summary>
        /// <param name="status"> The status is the network-specific status of the operation. </param>
        /// <param name="successful"> An Operation is considered successful if the Operation.Amount should affect the Operation.Account. Some blockchains (like Bitcoin) only include successful operations in blocks but other blockchains (like Ethereum) include unsuccessful operations that incur a fee. To reconcile the computed balance from the stream of Operations, it is critical to understand which Operation.Status indicate an Operation is successful and should affect an Account. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="status"/> is null. </exception>
        internal OperationStatus(string status, bool successful)
        {
            if (status == null)
            {
                throw new ArgumentNullException(nameof(status));
            }

            Status = status;
            Successful = successful;
        }

        /// <summary> The status is the network-specific status of the operation. </summary>
        public string Status { get; }
        /// <summary> An Operation is considered successful if the Operation.Amount should affect the Operation.Account. Some blockchains (like Bitcoin) only include successful operations in blocks but other blockchains (like Ethereum) include unsuccessful operations that incur a fee. To reconcile the computed balance from the stream of Operations, it is critical to understand which Operation.Status indicate an Operation is successful and should affect an Account. </summary>
        public bool Successful { get; }
    }
}
