// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Rosetta.Models
{
    /// <summary> SigningPayload is signed by the client with the keypair associated with an AccountIdentifier using the specified SignatureType. SignatureType can be optionally populated if there is a restriction on the signature scheme that can be used to sign the payload. </summary>
    public partial class SigningPayload
    {
        /// <summary> Initializes a new instance of SigningPayload. </summary>
        /// <param name="hexBytes"> . </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hexBytes"/> is null. </exception>
        public SigningPayload(string hexBytes)
        {
            if (hexBytes == null)
            {
                throw new ArgumentNullException(nameof(hexBytes));
            }

            HexBytes = hexBytes;
        }

        /// <summary> Initializes a new instance of SigningPayload. </summary>
        /// <param name="address"> [DEPRECATED by `account_identifier` in `v1.4.4`] The network-specific address of the account that should sign the payload. </param>
        /// <param name="accountIdentifier"> The account_identifier uniquely identifies an account within a network. All fields in the account_identifier are utilized to determine this uniqueness (including the metadata field, if populated). </param>
        /// <param name="hexBytes"> . </param>
        /// <param name="signatureType"> SignatureType is the type of a cryptographic signature. * ecdsa: `r (32-bytes) || s (32-bytes)` - `64 bytes` * ecdsa_recovery: `r (32-bytes) || s (32-bytes) || v (1-byte)` - `65 bytes` * ed25519: `R (32-byte) || s (32-bytes)` - `64 bytes` * schnorr_1: `r (32-bytes) || s (32-bytes)` - `64 bytes`  (schnorr signature implemented by Zilliqa where both `r` and `s` are scalars encoded as `32-bytes` values, most significant byte first.) * schnorr_poseidon: `r (32-bytes) || s (32-bytes)` where s = Hash(1st pk || 2nd pk || r) - `64 bytes`  (schnorr signature w/ Poseidon hash function implemented by O(1) Labs where both `r` and `s` are scalars encoded as `32-bytes` values, least significant byte first. https://github.com/CodaProtocol/signer-reference/blob/master/schnorr.ml ). </param>
        internal SigningPayload(string address, AccountIdentifier accountIdentifier, string hexBytes, SignatureType? signatureType)
        {
            Address = address;
            AccountIdentifier = accountIdentifier;
            HexBytes = hexBytes;
            SignatureType = signatureType;
        }

        /// <summary> [DEPRECATED by `account_identifier` in `v1.4.4`] The network-specific address of the account that should sign the payload. </summary>
        public string Address { get; set; }
        /// <summary> The account_identifier uniquely identifies an account within a network. All fields in the account_identifier are utilized to determine this uniqueness (including the metadata field, if populated). </summary>
        public AccountIdentifier AccountIdentifier { get; set; }
        public string HexBytes { get; set; }
        /// <summary> SignatureType is the type of a cryptographic signature. * ecdsa: `r (32-bytes) || s (32-bytes)` - `64 bytes` * ecdsa_recovery: `r (32-bytes) || s (32-bytes) || v (1-byte)` - `65 bytes` * ed25519: `R (32-byte) || s (32-bytes)` - `64 bytes` * schnorr_1: `r (32-bytes) || s (32-bytes)` - `64 bytes`  (schnorr signature implemented by Zilliqa where both `r` and `s` are scalars encoded as `32-bytes` values, most significant byte first.) * schnorr_poseidon: `r (32-bytes) || s (32-bytes)` where s = Hash(1st pk || 2nd pk || r) - `64 bytes`  (schnorr signature w/ Poseidon hash function implemented by O(1) Labs where both `r` and `s` are scalars encoded as `32-bytes` values, least significant byte first. https://github.com/CodaProtocol/signer-reference/blob/master/schnorr.ml ). </summary>
        public SignatureType? SignatureType { get; set; }
    }
}
