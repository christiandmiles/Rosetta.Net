// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Rosetta.Models
{
    /// <summary> CoinChange is used to represent a change in state of a some coin identified by a coin_identifier. This object is part of the Operation model and must be populated for UTXO-based blockchains. Coincidentally, this abstraction of UTXOs allows for supporting both account-based transfers and UTXO-based transfers on the same blockchain (when a transfer is account-based, don&apos;t populate this model). </summary>
    public partial class CoinChange
    {
        /// <summary> Initializes a new instance of CoinChange. </summary>
        /// <param name="coinIdentifier"> CoinIdentifier uniquely identifies a Coin. </param>
        /// <param name="coinAction"> CoinActions are different state changes that a Coin can undergo. When a Coin is created, it is coin_created. When a Coin is spent, it is coin_spent. It is assumed that a single Coin cannot be created or spent more than once. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="coinIdentifier"/> is null. </exception>
        public CoinChange(CoinIdentifier coinIdentifier, CoinAction coinAction)
        {
            if (coinIdentifier == null)
            {
                throw new ArgumentNullException(nameof(coinIdentifier));
            }

            CoinIdentifier = coinIdentifier;
            CoinAction = coinAction;
        }

        /// <summary> CoinIdentifier uniquely identifies a Coin. </summary>
        public CoinIdentifier CoinIdentifier { get; set; }
        /// <summary> CoinActions are different state changes that a Coin can undergo. When a Coin is created, it is coin_created. When a Coin is spent, it is coin_spent. It is assumed that a single Coin cannot be created or spent more than once. </summary>
        public CoinAction CoinAction { get; set; }
    }
}
