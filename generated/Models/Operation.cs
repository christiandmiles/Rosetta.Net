// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Rosetta.Models
{
    /// <summary> Operations contain all balance-changing information within a transaction. They are always one-sided (only affect 1 AccountIdentifier) and can succeed or fail independently from a Transaction. Operations are used both to represent on-chain data (Data API) and to construct new transactions (Construction API), creating a standard interface for reading and writing to blockchains. </summary>
    public partial class Operation
    {
        /// <summary> Initializes a new instance of Operation. </summary>
        /// <param name="operationIdentifier"> The operation_identifier uniquely identifies an operation within a transaction. </param>
        /// <param name="type"> Type is the network-specific type of the operation. Ensure that any type that can be returned here is also specified in the NetworkOptionsResponse. This can be very useful to downstream consumers that parse all block data. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationIdentifier"/> or <paramref name="type"/> is null. </exception>
        public Operation(OperationIdentifier operationIdentifier, string type)
        {
            if (operationIdentifier == null)
            {
                throw new ArgumentNullException(nameof(operationIdentifier));
            }
            if (type == null)
            {
                throw new ArgumentNullException(nameof(type));
            }

            OperationIdentifier = operationIdentifier;
            RelatedOperations = new ChangeTrackingList<OperationIdentifier>();
            Type = type;
        }

        /// <summary> Initializes a new instance of Operation. </summary>
        /// <param name="operationIdentifier"> The operation_identifier uniquely identifies an operation within a transaction. </param>
        /// <param name="relatedOperations"> Restrict referenced related_operations to identifier indices &lt; the current operation_identifier.index. This ensures there exists a clear DAG-structure of relations. Since operations are one-sided, one could imagine relating operations in a single transfer or linking operations in a call tree. </param>
        /// <param name="type"> Type is the network-specific type of the operation. Ensure that any type that can be returned here is also specified in the NetworkOptionsResponse. This can be very useful to downstream consumers that parse all block data. </param>
        /// <param name="status"> Status is the network-specific status of the operation. Status is not defined on the transaction object because blockchains with smart contracts may have transactions that partially apply (some operations are successful and some are not). Blockchains with atomic transactions (all operations succeed or all operations fail) will have the same status for each operation. On-chain operations (operations retrieved in the `/block` and `/block/transaction` endpoints) MUST have a populated status field (anything on-chain must have succeeded or failed). However, operations provided during transaction construction (often times called &quot;intent&quot; in the documentation) MUST NOT have a populated status field (operations yet to be included on-chain have not yet succeeded or failed). </param>
        /// <param name="account"> The account_identifier uniquely identifies an account within a network. All fields in the account_identifier are utilized to determine this uniqueness (including the metadata field, if populated). </param>
        /// <param name="amount"> Amount is some Value of a Currency. It is considered invalid to specify a Value without a Currency. </param>
        /// <param name="coinChange"> CoinChange is used to represent a change in state of a some coin identified by a coin_identifier. This object is part of the Operation model and must be populated for UTXO-based blockchains. Coincidentally, this abstraction of UTXOs allows for supporting both account-based transfers and UTXO-based transfers on the same blockchain (when a transfer is account-based, don&apos;t populate this model). </param>
        /// <param name="metadata"> Any object. </param>
        internal Operation(OperationIdentifier operationIdentifier, IList<OperationIdentifier> relatedOperations, string type, string status, AccountIdentifier account, Amount amount, CoinChange coinChange, object metadata)
        {
            OperationIdentifier = operationIdentifier;
            RelatedOperations = relatedOperations;
            Type = type;
            Status = status;
            Account = account;
            Amount = amount;
            CoinChange = coinChange;
            Metadata = metadata;
        }

        /// <summary> The operation_identifier uniquely identifies an operation within a transaction. </summary>
        public OperationIdentifier OperationIdentifier { get; set; }
        /// <summary> Restrict referenced related_operations to identifier indices &lt; the current operation_identifier.index. This ensures there exists a clear DAG-structure of relations. Since operations are one-sided, one could imagine relating operations in a single transfer or linking operations in a call tree. </summary>
        public IList<OperationIdentifier> RelatedOperations { get; }
        /// <summary> Type is the network-specific type of the operation. Ensure that any type that can be returned here is also specified in the NetworkOptionsResponse. This can be very useful to downstream consumers that parse all block data. </summary>
        public string Type { get; set; }
        /// <summary> Status is the network-specific status of the operation. Status is not defined on the transaction object because blockchains with smart contracts may have transactions that partially apply (some operations are successful and some are not). Blockchains with atomic transactions (all operations succeed or all operations fail) will have the same status for each operation. On-chain operations (operations retrieved in the `/block` and `/block/transaction` endpoints) MUST have a populated status field (anything on-chain must have succeeded or failed). However, operations provided during transaction construction (often times called &quot;intent&quot; in the documentation) MUST NOT have a populated status field (operations yet to be included on-chain have not yet succeeded or failed). </summary>
        public string Status { get; set; }
        /// <summary> The account_identifier uniquely identifies an account within a network. All fields in the account_identifier are utilized to determine this uniqueness (including the metadata field, if populated). </summary>
        public AccountIdentifier Account { get; set; }
        /// <summary> Amount is some Value of a Currency. It is considered invalid to specify a Value without a Currency. </summary>
        public Amount Amount { get; set; }
        /// <summary> CoinChange is used to represent a change in state of a some coin identified by a coin_identifier. This object is part of the Operation model and must be populated for UTXO-based blockchains. Coincidentally, this abstraction of UTXOs allows for supporting both account-based transfers and UTXO-based transfers on the same blockchain (when a transfer is account-based, don&apos;t populate this model). </summary>
        public CoinChange CoinChange { get; set; }
        /// <summary> Any object. </summary>
        public object Metadata { get; set; }
    }
}
