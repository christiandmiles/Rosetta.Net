// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Rosetta.Models
{
    /// <summary> Blocks contain an array of Transactions that occurred at a particular BlockIdentifier. A hard requirement for blocks returned by Rosetta implementations is that they MUST be _inalterable_: once a client has requested and received a block identified by a specific BlockIndentifier, all future calls for that same BlockIdentifier must return the same block contents. </summary>
    public partial class Block
    {
        /// <summary> Initializes a new instance of Block. </summary>
        /// <param name="blockIdentifier"> The block_identifier uniquely identifies a block in a particular network. </param>
        /// <param name="parentBlockIdentifier"> The block_identifier uniquely identifies a block in a particular network. </param>
        /// <param name="timestamp"> The timestamp of the block in milliseconds since the Unix Epoch. The timestamp is stored in milliseconds because some blockchains produce blocks more often than once a second. </param>
        /// <param name="transactions"> . </param>
        /// <exception cref="ArgumentNullException"> <paramref name="blockIdentifier"/>, <paramref name="parentBlockIdentifier"/>, or <paramref name="transactions"/> is null. </exception>
        internal Block(BlockIdentifier blockIdentifier, BlockIdentifier parentBlockIdentifier, long timestamp, IEnumerable<Transaction> transactions)
        {
            if (blockIdentifier == null)
            {
                throw new ArgumentNullException(nameof(blockIdentifier));
            }
            if (parentBlockIdentifier == null)
            {
                throw new ArgumentNullException(nameof(parentBlockIdentifier));
            }
            if (transactions == null)
            {
                throw new ArgumentNullException(nameof(transactions));
            }

            BlockIdentifier = blockIdentifier;
            ParentBlockIdentifier = parentBlockIdentifier;
            Timestamp = timestamp;
            Transactions = transactions.ToList();
        }

        /// <summary> Initializes a new instance of Block. </summary>
        /// <param name="blockIdentifier"> The block_identifier uniquely identifies a block in a particular network. </param>
        /// <param name="parentBlockIdentifier"> The block_identifier uniquely identifies a block in a particular network. </param>
        /// <param name="timestamp"> The timestamp of the block in milliseconds since the Unix Epoch. The timestamp is stored in milliseconds because some blockchains produce blocks more often than once a second. </param>
        /// <param name="transactions"> . </param>
        /// <param name="metadata"> Any object. </param>
        internal Block(BlockIdentifier blockIdentifier, BlockIdentifier parentBlockIdentifier, long timestamp, IReadOnlyList<Transaction> transactions, object metadata)
        {
            BlockIdentifier = blockIdentifier;
            ParentBlockIdentifier = parentBlockIdentifier;
            Timestamp = timestamp;
            Transactions = transactions;
            Metadata = metadata;
        }

        /// <summary> The block_identifier uniquely identifies a block in a particular network. </summary>
        public BlockIdentifier BlockIdentifier { get; }
        /// <summary> The block_identifier uniquely identifies a block in a particular network. </summary>
        public BlockIdentifier ParentBlockIdentifier { get; }
        /// <summary> The timestamp of the block in milliseconds since the Unix Epoch. The timestamp is stored in milliseconds because some blockchains produce blocks more often than once a second. </summary>
        public long Timestamp { get; }
        public IReadOnlyList<Transaction> Transactions { get; }
        /// <summary> Any object. </summary>
        public object Metadata { get; }
    }
}
