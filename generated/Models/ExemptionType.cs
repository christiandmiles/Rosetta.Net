// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Rosetta.Models
{
    /// <summary> ExemptionType is used to indicate if the live balance for an account subject to a BalanceExemption could increase above, decrease below, or equal the computed balance. * greater_or_equal: The live balance may increase above or equal the computed balance. This typically   occurs with staking rewards that accrue on each block. * less_or_equal: The live balance may decrease below or equal the computed balance. This typically   occurs as balance moves from locked to spendable on a vesting account. * dynamic: The live balance may increase above, decrease below, or equal the computed balance. This   typically occurs with tokens that have a dynamic supply. </summary>
    public readonly partial struct ExemptionType : IEquatable<ExemptionType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="ExemptionType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ExemptionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string GreaterOrEqualValue = "greater_or_equal";
        private const string LessOrEqualValue = "less_or_equal";
        private const string DynamicValue = "dynamic";

        /// <summary> greater_or_equal. </summary>
        public static ExemptionType GreaterOrEqual { get; } = new ExemptionType(GreaterOrEqualValue);
        /// <summary> less_or_equal. </summary>
        public static ExemptionType LessOrEqual { get; } = new ExemptionType(LessOrEqualValue);
        /// <summary> dynamic. </summary>
        public static ExemptionType Dynamic { get; } = new ExemptionType(DynamicValue);
        /// <summary> Determines if two <see cref="ExemptionType"/> values are the same. </summary>
        public static bool operator ==(ExemptionType left, ExemptionType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ExemptionType"/> values are not the same. </summary>
        public static bool operator !=(ExemptionType left, ExemptionType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ExemptionType"/>. </summary>
        public static implicit operator ExemptionType(string value) => new ExemptionType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ExemptionType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ExemptionType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
