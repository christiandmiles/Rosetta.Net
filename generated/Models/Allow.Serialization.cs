// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Rosetta.Models
{
    public partial class Allow
    {
        internal static Allow DeserializeAllow(JsonElement element)
        {
            IReadOnlyList<OperationStatus> operationStatuses = default;
            IReadOnlyList<string> operationTypes = default;
            IReadOnlyList<Error> errors = default;
            bool historicalBalanceLookup = default;
            Optional<long> timestampStartIndex = default;
            IReadOnlyList<string> callMethods = default;
            IReadOnlyList<BalanceExemption> balanceExemptions = default;
            bool mempoolCoins = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("operation_statuses"))
                {
                    List<OperationStatus> array = new List<OperationStatus>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(OperationStatus.DeserializeOperationStatus(item));
                    }
                    operationStatuses = array;
                    continue;
                }
                if (property.NameEquals("operation_types"))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    operationTypes = array;
                    continue;
                }
                if (property.NameEquals("errors"))
                {
                    List<Error> array = new List<Error>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Error.DeserializeError(item));
                    }
                    errors = array;
                    continue;
                }
                if (property.NameEquals("historical_balance_lookup"))
                {
                    historicalBalanceLookup = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("timestamp_start_index"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    timestampStartIndex = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("call_methods"))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    callMethods = array;
                    continue;
                }
                if (property.NameEquals("balance_exemptions"))
                {
                    List<BalanceExemption> array = new List<BalanceExemption>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(BalanceExemption.DeserializeBalanceExemption(item));
                    }
                    balanceExemptions = array;
                    continue;
                }
                if (property.NameEquals("mempool_coins"))
                {
                    mempoolCoins = property.Value.GetBoolean();
                    continue;
                }
            }
            return new Allow(operationStatuses, operationTypes, errors, historicalBalanceLookup, Optional.ToNullable(timestampStartIndex), callMethods, balanceExemptions, mempoolCoins);
        }
    }
}
