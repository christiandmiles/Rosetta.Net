// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Rosetta.Models
{
    /// <summary> NetworkStatusResponse contains basic information about the node&apos;s view of a blockchain network. It is assumed that any BlockIdentifier.Index less than or equal to CurrentBlockIdentifier.Index can be queried. If a Rosetta implementation prunes historical state, it should populate the optional `oldest_block_identifier` field with the oldest block available to query. If this is not populated, it is assumed that the `genesis_block_identifier` is the oldest queryable block. If a Rosetta implementation performs some pre-sync before it is possible to query blocks, sync_status should be populated so that clients can still monitor healthiness. Without this field, it may appear that the implementation is stuck syncing and needs to be terminated. </summary>
    public partial class NetworkStatusResponse
    {
        /// <summary> Initializes a new instance of NetworkStatusResponse. </summary>
        /// <param name="currentBlockIdentifier"> The block_identifier uniquely identifies a block in a particular network. </param>
        /// <param name="currentBlockTimestamp"> The timestamp of the block in milliseconds since the Unix Epoch. The timestamp is stored in milliseconds because some blockchains produce blocks more often than once a second. </param>
        /// <param name="genesisBlockIdentifier"> The block_identifier uniquely identifies a block in a particular network. </param>
        /// <param name="peers"> . </param>
        /// <exception cref="ArgumentNullException"> <paramref name="currentBlockIdentifier"/>, <paramref name="genesisBlockIdentifier"/>, or <paramref name="peers"/> is null. </exception>
        internal NetworkStatusResponse(BlockIdentifier currentBlockIdentifier, long currentBlockTimestamp, BlockIdentifier genesisBlockIdentifier, IEnumerable<Peer> peers)
        {
            if (currentBlockIdentifier == null)
            {
                throw new ArgumentNullException(nameof(currentBlockIdentifier));
            }
            if (genesisBlockIdentifier == null)
            {
                throw new ArgumentNullException(nameof(genesisBlockIdentifier));
            }
            if (peers == null)
            {
                throw new ArgumentNullException(nameof(peers));
            }

            CurrentBlockIdentifier = currentBlockIdentifier;
            CurrentBlockTimestamp = currentBlockTimestamp;
            GenesisBlockIdentifier = genesisBlockIdentifier;
            Peers = peers.ToList();
        }

        /// <summary> Initializes a new instance of NetworkStatusResponse. </summary>
        /// <param name="currentBlockIdentifier"> The block_identifier uniquely identifies a block in a particular network. </param>
        /// <param name="currentBlockTimestamp"> The timestamp of the block in milliseconds since the Unix Epoch. The timestamp is stored in milliseconds because some blockchains produce blocks more often than once a second. </param>
        /// <param name="genesisBlockIdentifier"> The block_identifier uniquely identifies a block in a particular network. </param>
        /// <param name="oldestBlockIdentifier"> The block_identifier uniquely identifies a block in a particular network. </param>
        /// <param name="syncStatus"> SyncStatus is used to provide additional context about an implementation&apos;s sync status. This object is often used by implementations to indicate healthiness when block data cannot be queried until some sync phase completes or cannot be determined by comparing the timestamp of the most recent block with the current time. </param>
        /// <param name="peers"> . </param>
        internal NetworkStatusResponse(BlockIdentifier currentBlockIdentifier, long currentBlockTimestamp, BlockIdentifier genesisBlockIdentifier, BlockIdentifier oldestBlockIdentifier, SyncStatus syncStatus, IReadOnlyList<Peer> peers)
        {
            CurrentBlockIdentifier = currentBlockIdentifier;
            CurrentBlockTimestamp = currentBlockTimestamp;
            GenesisBlockIdentifier = genesisBlockIdentifier;
            OldestBlockIdentifier = oldestBlockIdentifier;
            SyncStatus = syncStatus;
            Peers = peers;
        }

        /// <summary> The block_identifier uniquely identifies a block in a particular network. </summary>
        public BlockIdentifier CurrentBlockIdentifier { get; }
        /// <summary> The timestamp of the block in milliseconds since the Unix Epoch. The timestamp is stored in milliseconds because some blockchains produce blocks more often than once a second. </summary>
        public long CurrentBlockTimestamp { get; }
        /// <summary> The block_identifier uniquely identifies a block in a particular network. </summary>
        public BlockIdentifier GenesisBlockIdentifier { get; }
        /// <summary> The block_identifier uniquely identifies a block in a particular network. </summary>
        public BlockIdentifier OldestBlockIdentifier { get; }
        /// <summary> SyncStatus is used to provide additional context about an implementation&apos;s sync status. This object is often used by implementations to indicate healthiness when block data cannot be queried until some sync phase completes or cannot be determined by comparing the timestamp of the most recent block with the current time. </summary>
        public SyncStatus SyncStatus { get; }
        public IReadOnlyList<Peer> Peers { get; }
    }
}
