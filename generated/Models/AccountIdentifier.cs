// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Rosetta.Models
{
    /// <summary> The account_identifier uniquely identifies an account within a network. All fields in the account_identifier are utilized to determine this uniqueness (including the metadata field, if populated). </summary>
    public partial class AccountIdentifier
    {
        /// <summary> Initializes a new instance of AccountIdentifier. </summary>
        /// <param name="address"> The address may be a cryptographic public key (or some encoding of it) or a provided username. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="address"/> is null. </exception>
        public AccountIdentifier(string address)
        {
            if (address == null)
            {
                throw new ArgumentNullException(nameof(address));
            }

            Address = address;
        }

        /// <summary> Initializes a new instance of AccountIdentifier. </summary>
        /// <param name="address"> The address may be a cryptographic public key (or some encoding of it) or a provided username. </param>
        /// <param name="subAccount"> An account may have state specific to a contract address (ERC-20 token) and/or a stake (delegated balance). The sub_account_identifier should specify which state (if applicable) an account instantiation refers to. </param>
        /// <param name="metadata"> Blockchains that utilize a username model (where the address is not a derivative of a cryptographic public key) should specify the public key(s) owned by the address in metadata. </param>
        internal AccountIdentifier(string address, SubAccountIdentifier subAccount, object metadata)
        {
            Address = address;
            SubAccount = subAccount;
            Metadata = metadata;
        }

        /// <summary> The address may be a cryptographic public key (or some encoding of it) or a provided username. </summary>
        public string Address { get; set; }
        /// <summary> An account may have state specific to a contract address (ERC-20 token) and/or a stake (delegated balance). The sub_account_identifier should specify which state (if applicable) an account instantiation refers to. </summary>
        public SubAccountIdentifier SubAccount { get; set; }
        /// <summary> Blockchains that utilize a username model (where the address is not a derivative of a cryptographic public key) should specify the public key(s) owned by the address in metadata. </summary>
        public object Metadata { get; set; }
    }
}
