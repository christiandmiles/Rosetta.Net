// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Rosetta.Models
{
    /// <summary> BlockEvent represents the addition or removal of a BlockIdentifier from storage. Streaming BlockEvents allows lightweight clients to update their own state without needing to implement their own syncing logic. </summary>
    public partial class BlockEvent
    {
        /// <summary> Initializes a new instance of BlockEvent. </summary>
        /// <param name="sequence"> sequence is the unique identifier of a BlockEvent within the context of a NetworkIdentifier. </param>
        /// <param name="blockIdentifier"> The block_identifier uniquely identifies a block in a particular network. </param>
        /// <param name="type"> BlockEventType determines if a BlockEvent represents the addition or removal of a block. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="blockIdentifier"/> is null. </exception>
        internal BlockEvent(long sequence, BlockIdentifier blockIdentifier, BlockEventType type)
        {
            if (blockIdentifier == null)
            {
                throw new ArgumentNullException(nameof(blockIdentifier));
            }

            Sequence = sequence;
            BlockIdentifier = blockIdentifier;
            Type = type;
        }

        /// <summary> sequence is the unique identifier of a BlockEvent within the context of a NetworkIdentifier. </summary>
        public long Sequence { get; }
        /// <summary> The block_identifier uniquely identifies a block in a particular network. </summary>
        public BlockIdentifier BlockIdentifier { get; }
        /// <summary> BlockEventType determines if a BlockEvent represents the addition or removal of a block. </summary>
        public BlockEventType Type { get; }
    }
}
