// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Rosetta.Models
{
    /// <summary> SearchTransactionsRequest is used to search for transactions matching a set of provided conditions in canonical blocks. </summary>
    public partial class SearchTransactionsRequest
    {
        /// <summary> Initializes a new instance of SearchTransactionsRequest. </summary>
        /// <param name="networkIdentifier"> The network_identifier specifies which network a particular object is associated with. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="networkIdentifier"/> is null. </exception>
        public SearchTransactionsRequest(NetworkIdentifier networkIdentifier)
        {
            if (networkIdentifier == null)
            {
                throw new ArgumentNullException(nameof(networkIdentifier));
            }

            NetworkIdentifier = networkIdentifier;
        }

        /// <summary> The network_identifier specifies which network a particular object is associated with. </summary>
        public NetworkIdentifier NetworkIdentifier { get; }
        /// <summary> Operator is used by query-related endpoints to determine how to apply conditions. If this field is not populated, the default `and` value will be used. </summary>
        public Operator? Operator { get; set; }
        /// <summary> max_block is the largest block index to consider when searching for transactions. If this field is not populated, the current block is considered the max_block. If you do not specify a max_block, it is possible a newly synced block will interfere with paginated transaction queries (as the offset could become invalid with newly added rows). </summary>
        public long? MaxBlock { get; set; }
        /// <summary> offset is the offset into the query result to start returning transactions. If any search conditions are changed, the query offset will change and you must restart your search iteration. </summary>
        public long? Offset { get; set; }
        /// <summary> limit is the maximum number of transactions to return in one call. The implementation may return &lt;= limit transactions. </summary>
        public long? Limit { get; set; }
        /// <summary> The transaction_identifier uniquely identifies a transaction in a particular network and block or in the mempool. </summary>
        public TransactionIdentifier TransactionIdentifier { get; set; }
        /// <summary> The account_identifier uniquely identifies an account within a network. All fields in the account_identifier are utilized to determine this uniqueness (including the metadata field, if populated). </summary>
        public AccountIdentifier AccountIdentifier { get; set; }
        /// <summary> CoinIdentifier uniquely identifies a Coin. </summary>
        public CoinIdentifier CoinIdentifier { get; set; }
        /// <summary> Currency is composed of a canonical Symbol and Decimals. This Decimals value is used to convert an Amount.Value from atomic units (Satoshis) to standard units (Bitcoins). </summary>
        public Currency Currency { get; set; }
        /// <summary> status is the network-specific operation type. </summary>
        public string Status { get; set; }
        /// <summary> type is the network-specific operation type. </summary>
        public string Type { get; set; }
        /// <summary> address is AccountIdentifier.Address. This is used to get all transactions related to an AccountIdentifier.Address, regardless of SubAccountIdentifier. </summary>
        public string Address { get; set; }
        /// <summary> success is a synthetic condition populated by parsing network-specific operation statuses (using the mapping provided in `/network/options`). </summary>
        public bool? Success { get; set; }
    }
}
