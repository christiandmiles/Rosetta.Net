// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Rosetta.Models
{
    /// <summary> CurveType is the type of cryptographic curve associated with a PublicKey. * secp256k1: SEC compressed - `33 bytes` (https://secg.org/sec1-v2.pdf#subsubsection.2.3.3) * secp256r1: SEC compressed - `33 bytes` (https://secg.org/sec1-v2.pdf#subsubsection.2.3.3) * edwards25519: `y (255-bits) || x-sign-bit (1-bit)` - `32 bytes` (https://ed25519.cr.yp.to/ed25519-20110926.pdf) * tweedle: 1st pk : Fq.t (32 bytes) || 2nd pk : Fq.t (32 bytes) (https://github.com/CodaProtocol/coda/blob/develop/rfcs/0038-rosetta-construction-api.md#marshal-keys). </summary>
    public readonly partial struct CurveType : IEquatable<CurveType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="CurveType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CurveType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string Secp256K1Value = "secp256k1";
        private const string Secp256R1Value = "secp256r1";
        private const string Edwards25519Value = "edwards25519";
        private const string TweedleValue = "tweedle";

        /// <summary> secp256k1. </summary>
        public static CurveType Secp256K1 { get; } = new CurveType(Secp256K1Value);
        /// <summary> secp256r1. </summary>
        public static CurveType Secp256R1 { get; } = new CurveType(Secp256R1Value);
        /// <summary> edwards25519. </summary>
        public static CurveType Edwards25519 { get; } = new CurveType(Edwards25519Value);
        /// <summary> tweedle. </summary>
        public static CurveType Tweedle { get; } = new CurveType(TweedleValue);
        /// <summary> Determines if two <see cref="CurveType"/> values are the same. </summary>
        public static bool operator ==(CurveType left, CurveType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CurveType"/> values are not the same. </summary>
        public static bool operator !=(CurveType left, CurveType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="CurveType"/>. </summary>
        public static implicit operator CurveType(string value) => new CurveType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CurveType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CurveType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
