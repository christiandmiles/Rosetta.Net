// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Rosetta.Models
{
    /// <summary> EventsBlocksResponse contains an ordered collection of BlockEvents and the max retrievable sequence. </summary>
    public partial class EventsBlocksResponse
    {
        /// <summary> Initializes a new instance of EventsBlocksResponse. </summary>
        /// <param name="maxSequence"> max_sequence is the maximum available sequence number to fetch. </param>
        /// <param name="events"> events is an array of BlockEvents indicating the order to add and remove blocks to maintain a canonical view of blockchain state. Lightweight clients can use this event stream to update state without implementing their own block syncing logic. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="events"/> is null. </exception>
        internal EventsBlocksResponse(long maxSequence, IEnumerable<BlockEvent> events)
        {
            if (events == null)
            {
                throw new ArgumentNullException(nameof(events));
            }

            MaxSequence = maxSequence;
            Events = events.ToList();
        }

        /// <summary> Initializes a new instance of EventsBlocksResponse. </summary>
        /// <param name="maxSequence"> max_sequence is the maximum available sequence number to fetch. </param>
        /// <param name="events"> events is an array of BlockEvents indicating the order to add and remove blocks to maintain a canonical view of blockchain state. Lightweight clients can use this event stream to update state without implementing their own block syncing logic. </param>
        internal EventsBlocksResponse(long maxSequence, IReadOnlyList<BlockEvent> events)
        {
            MaxSequence = maxSequence;
            Events = events;
        }

        /// <summary> max_sequence is the maximum available sequence number to fetch. </summary>
        public long MaxSequence { get; }
        /// <summary> events is an array of BlockEvents indicating the order to add and remove blocks to maintain a canonical view of blockchain state. Lightweight clients can use this event stream to update state without implementing their own block syncing logic. </summary>
        public IReadOnlyList<BlockEvent> Events { get; }
    }
}
